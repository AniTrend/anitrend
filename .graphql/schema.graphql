# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Series node with ID"
interface SeriesNode {
    "The ID of the object"
    id: ID!
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Query {
    "Find a series item by filtering with an id"
    series(
        "AniDB Id"
        anidb: Int,
        "AniList Id"
        anilist: Int,
        "AnimePlanet Slug"
        animeplanet: String,
        "Series Id"
        id: ID,
        "Kitsu Id"
        kitsu: Int,
        "Mal Id"
        mal: Int,
        "Notify.moe Id"
        notify: String,
        "TVDB Id"
        tvdb: Int
    ): Series
    "Discover a from a paged list of items"
    seriesPaged(
        after: String,
        before: String,
        first: Int,
        last: Int,
        offset: Int,
        "Ordering"
        orderBy: String,
        title: String
    ): SeriesConnection
}

"Related media urls"
type Relation {
    "Url of the related item of this series"
    url: String!
}

"A representation of a series item"
type Series implements SeriesNode {
    "Number of episodes"
    episodes: Int!
    "The ID of the object"
    id: ID!
    "Primary picture of the series"
    picture: String
    "Related series urls"
    relationSet: [Relation]!
    "Release season"
    season: SeasonType!
    "Other sources"
    source: Source!
    "Series type"
    status: StatusType!
    "Primary picture of the series"
    thumbnail: String
    "Title of the series"
    title: String!
    "Series type"
    type: SeriesType!
    "Last updated time"
    updatedAt: Int!
    "Release year"
    year: Int
}

type SeriesConnection {
    "Contains the nodes in this connection."
    edges: [SeriesEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `Series` and its cursor."
type SeriesEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Series
}

"Other source ids of where this series can be found"
type Source {
    "Identifier for anidb"
    anidb: Int
    "Identifier for anilist"
    anilist: Int
    "Identifier for animeplanet"
    animeplanet: String
    "Identifier for kitsu"
    kitsu: Int
    "Identifier for mal"
    mal: Int
    "Identifier for notify"
    notify: String
    "Identifier for tmdb"
    tmdb: Int
    "Identifier for trakt"
    trakt: Int
    "Identifier for tvdb"
    tvdb: Int
}

"An enumeration."
enum SeasonType {
    FALL
    SPRING
    SUMMER
    WINTER
}

"An enumeration."
enum SeriesType {
    MOVIE
    ONA
    OVA
    SPECIAL
    TV
}

"An enumeration."
enum StatusType {
    CURRENTLY
    FINISHED
    UNKNOWN
    UPCOMING
}
